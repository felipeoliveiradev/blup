<%_ const name = new props.lettersCases(props.packageName).Capitalizer()  _%>
<%_ const plural = new props.lettersCases(props.plural).Capitalizer()  _%>
<%_ const list = []  _%>
package <%= props.package %>.modules.<%=name %>.infra.frameworks.spring.Databases;


import <%= props.package %>.modules.<%=name %>.domain.<%= name %>;
import <%= props.package %>.modules.<%=name %>.domain.<%= name %>Gateway;
import <%= props.package %>.modules.<%=name %>.domain.<%= name %>ID;
import <%= props.package %>.modules.<%=name %>.infra.<%= name %>DataEntity;
import <%= props.package %>.modules.<%=name %>.infra.frameworks.spring.<%= name %>Repository;

import <%= props.package %>.modules.required.helpers.GatewayDefault;
import <%= props.package %>.modules.required.pagination.Pagination;
import <%= props.package %>.modules.required.pagination.SearchQuery;

import static <%= props.package %>.modules.spring.utils.SpecificationUtils.like;

import org.springframework.stereotype.Component;
import org.springframework.data.jpa.domain.Specification;
import java.util.Optional;

@Component
public class <%= name %>MySQLGateway extends GatewayDefault<<%= name %>DataEntity> implements <%= name %>Gateway {
    private final <%= name %>Repository repository;



    public <%= name %>MySQLGateway(final <%= name %>Repository repository){
        this.repository = repository;
    }

    @Override
    public <%= name %> create(<%= name %> a<%= name %>) {
        return save(a<%= name %>);
    }

    @Override
    public void deleteById(<%= name %>ID anID) {
        final String idValue = anID.getValue();
        if(this.repository.existsById(idValue)){
            this.repository.deleteById(idValue);
        }
    }

    @Override
    public Optional<<%= name %>> findById(<%= name %>ID anID) {
        return this.repository.findById(anID.getValue()).map(<%= name %>DataEntity::toAggregate);
    }

    @Override
    public <%= name %> update(final <%= name %> a<%= name %>) {
        return save(a<%= name %>);
    }

    @Override
    public Pagination<<%= name %>> findAll(final SearchQuery aQuery) {

        final var specifications = Optional.ofNullable(aQuery.terms())
                .filter(str -> !str.isBlank())
                .map(this::assembleSpecification)
                .orElse(null);


        final var pageResult =
                this.repository.findAll(Specification.where(specifications), page(aQuery));

        return new Pagination<>(
                pageResult.getNumber(),
                pageResult.getSize(),
                pageResult.getTotalElements(),
                pageResult.map(<%= name %>DataEntity::toAggregate).toList()
        );
    }

    public <%= name %> save(final <%= name %> a<%= name %>) {
        return this.repository.save(<%= name %>DataEntity.from(a<%= name %>)).toAggregate();
    }
    private Specification<<%= name %>DataEntity> assembleSpecification(final String str) {
            <%- props.extraField -%>
}
}
